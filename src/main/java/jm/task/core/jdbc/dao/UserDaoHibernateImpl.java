package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;

import java.util.List;

public class UserDaoHibernateImpl implements UserDao {

    private static final UserDao INSTANCE = new UserDaoHibernateImpl();

    private static final SessionFactory SF = Util.getSessionFactory();

    public static UserDao getInstance() {
        return INSTANCE;
    }

    private UserDaoHibernateImpl() {
    }

    @Override
    public void createUsersTable() {
        try (Session session = SF.openSession()) {
            session.beginTransaction();
            String queryCreateUsersTable = """
                            CREATE TABLE IF NOT EXISTS users (
                                id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                name VARCHAR(100) NOT NULL,
                                lastname VARCHAR(100) NOT NULL,
                                age SMALLINT NOT NULL
                            );
                    """;
            session.createNativeQuery(queryCreateUsersTable).executeUpdate();
            session.getTransaction().commit();
        } catch (HibernateException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void dropUsersTable() {
        try (Session session = SF.openSession()) {
            session.beginTransaction();
            String queryDropUsersTable = "DROP TABLE IF EXISTS users;";
            session.createNativeQuery(queryDropUsersTable).executeUpdate();
            session.getTransaction().commit();
        } catch (HibernateException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void saveUser(String name, String lastName, byte age) {
        try (Session session = SF.openSession()) {
            session.beginTransaction();
            User user = new User(name, lastName, age);
            session.save(user);
            session.getTransaction().commit();
            System.out.printf("User с именем – %s добавлен в базу данных \n", name);
        } catch (HibernateException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void removeUserById(long id) {
        try (Session session = SF.openSession()) {
            session.beginTransaction();
            Query query = session.createQuery("delete User where id=:id");
            query.setParameter("id", id);
            query.executeUpdate();
            session.getTransaction().commit();
        } catch (HibernateException e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<User> getAllUsers() {
        List<User> users = null;
        try (Session session = SF.openSession()) {
            session.beginTransaction();
            users = session.createQuery("from User", User.class).list();
            session.getTransaction().commit();
        } catch (HibernateException e) {
            e.printStackTrace();
        }
        return users;
    }

    @Override
    public void cleanUsersTable() {
        try (Session session = SF.openSession()) {
            session.beginTransaction();
            session.createQuery("delete User").executeUpdate();
            session.getTransaction().commit();
        } catch (HibernateException e) {
            e.printStackTrace();
        }
    }

}
